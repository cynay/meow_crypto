#!/usr/bin/ruby
# Crypto Challenge:  http://cryptopals.com/

$slow = false 

$input = '49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d'
$b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".scan(/./)

puts "----------------------------------------------------------------------------------"
puts ">> crypto challenge :: Set: 1 :: Challenge: 1 "
puts "----------------------------------------------------------------------------------\n"

def msg_to_hex(msg)
#return msg.scan(/./).map { |x|  x.unpack('H*').join }.join
msg.unpack('H*')[0]
end

def str_to_hex(s)
return s.scan(/../).map { |x| '0x' + x }.join
end

def str_to_intArray(s)
return s.scan(/../).map { |i| i.hex.to_i }.to_a
end

def hex_to_bin(h)
return  h.scan(/..../).map { |x| "%08b" % x.hex.to_i }.join
end

def bin_to_base64(bi)
return bi.scan(/....../).map { |x| $b64[x.to_i(2)] }.join
end  

def str_to_base64(s)
return [[s].pack('H*')].pack('m0')
#return bin_to_base64(hex_to_bin(str_to_hex(s)))
end

puts "hex: \n" + str_to_hex($input)
puts "\n"
puts "bin: \n" + hex_to_bin(str_to_hex($input))
puts "\n"
puts "base64: \n" + bin_to_base64(hex_to_bin(str_to_hex($input)))

# hex string to ascii
str = [$input].pack('H*')
puts "String: " + str
puts "\n TEST: " + [str].pack('m0')

puts "\n----------------------------------------------------------------------------------"
puts ">> crypto challenge :: Set: 1 :: Challenge: 2 "
puts "----------------------------------------------------------------------------------\n"

$inputA = '1c0111001f010100061a024b53535009181c'
$inputB = '686974207468652062756c6c277320657965'

def do_xor(a,b)
  binA = hex_to_bin(str_to_hex(a)).to_i(2)
  binB = hex_to_bin(str_to_hex(b)).to_i(2)
return (binA ^ binB).to_s(16)
end

puts "xor: \n" + do_xor($inputA, $inputB)
puts "xor_str: \n" + [do_xor($inputA, $inputB)].pack('H*')

def do_xor_byte(a,b)
  aa = str_to_intArray(a)
  ab = str_to_intArray(b)
  i = 0
  xor = ''
  while i < aa.size do
    xor << ( aa[i] ^ ab[i] ).to_s(16)
  i += 1
  end
return xor
end
puts "XOR-Byte-String: " + [do_xor_byte($inputA, $inputB)].pack('H*')


puts "\n----------------------------------------------------------------------------------"
puts ">> crypto challenge :: Set: 1 :: Challenge: 3 "
puts "----------------------------------------------------------------------------------\n"

$input3 = '1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736'
$keywords = ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'I', 'it', 'for', 'not', 'on', 'with', 'he', 'as', 'you', 'do', 'at', 'this', 'but', 'his', 'by', 'from', 'they', 'we', 'say', 'her', 'she', 'or', 'an', 'will', 'my', 'one', 'all', 'would', 'there', 'their', 'what', 'so', 'up', 'out', 'if', 'about', 'who', 'get', 'which', 'go', 'me', 'when', 'make', 'can', 'like', 'time', 'no', 'just', 'him', 'know', 'take', 'people', 'into', 'year', 'your', 'good', 'some', 'could', 'them', 'see', 'other', 'than', 'then', 'now', 'look', 'only', 'come', 'its', 'over', 'think', 'also', 'back', 'after', 'use', 'two', 'how', 'our', 'work', 'first', 'well', 'way', 'even', 'new', 'want', 'because', 'any', 'these', 'give', 'day', 'most', 'us']

def do_xor_crack(a,key)
  aa = str_to_intArray(a)
  i = 0
  xor = ''
  while i < aa.size do
    xor << ( aa[i] ^ key ).to_s(16)
  i += 1
  end
return xor
end


def decrypt_xor(h)
  bf = Array.new
  result = Hash.new
  for i in 0..255
    bf[i] = [do_xor_crack(h, i )].pack('H*')
    result[i] = freq_to_int(bf[i])

#    puts "#{freq_to_int(freq_anal(bf[i]))}: " + bf[i]
#    puts "#{i}: " + bf[i]
#    puts "xor #{i}: " + [do_xor_crack($input3, i )].pack('H*')
  end
  puts "-= Results for XOR decipher analysis =-"
  result.sort_by {|k,v| v}.reverse[0..4].each do |k,v|
    puts "Key:#{k.chr} | Score: #{v}  |  Text: #{bf[k]}"
  end
end

def freq_to_int(msg)
  hash = freq_anal(msg)
  score = 0
  hash.each do |k,v|
    score = case k
      when ('e' or 't' or 'a' or 'o' or 'i') then score += 3 * v
      else score += v
    end
  end

  score += 10 * (msg.split(' ') & $keywords).length
#  score += 10 if $keywords.any? {|w| msg[w]}
return score
end

def freq_anal(msg)
  h = Hash.new 0
#  s = msg.gsub(/[\W_]+/, '')
  s = msg.gsub(/[^A-Za-z]+/, '').downcase

  unless s.length == 0
    s.split("").each do |c|
      h[c.chr] += 1 
    end
  end

return h
end

decrypt_xor($input3)


puts "\n----------------------------------------------------------------------------------"
puts ">> crypto challenge :: Set: 1 :: Challenge: 4 "
puts "----------------------------------------------------------------------------------\n"

$eval_hash = Hash.new

def xor_analyze(msg)
  bf = Array.new
  ret = Array.new
  result = Hash.new

  for i in 0..255
    bf[i] = [do_xor_crack(msg, i )].pack('H*')
    result[i] = freq_to_int(bf[i])
    
  end
  ret = result.sort_by {|k,v| v}.reverse[0]

return ret[0], ret[1], bf[ret[0]] 
end

def find_xor_string
  result = Hash.new
  values = Array.new
  line_num = 0

  File.open('./4.txt').each do |line|
    score = 0
    key = 0
    msg = ''     
    key, score, msg = xor_analyze(line)
    $eval_hash[score] = [line_num, key, msg]
    line_num += 1
  end
  puts "-= Results for XOR-File decipher analysis =-"
  $eval_hash.sort_by {|k,v| k}.reverse[0..4].each do |k,v|  
    puts "Score: #{k}  Line: #{v[0]}  Key: #{v[1]}  |  Text: #{v[2]}"   
  end

=begin
  result.sort_by {|k,v| v}.reverse[0..19].each do |k,v|
    puts "#{k}:  Score: #{v[0]}  |  Text: #{bf[v[0]]} "
  end
=end
end

puts "no output because slow == false" if $slow == false
find_xor_string() if $slow == true


puts "\n----------------------------------------------------------------------------------"
puts ">> crypto challenge :: Set: 1 :: Challenge: 5 "
puts "----------------------------------------------------------------------------------\n"

$input5 = "Burning 'em, if you ain't quick and nimble\n" +
  "I go crazy when I hear a cymbal"

$input51 = "0b3637272a2b2e63622c2e69692a23693a2a3c6324202d623d63343c2a26226324272765272" +
  "a282b2f20430a652e2c652a3124333a653e2b2027630c692b20283165286326302e27282f"

def decrypt_xor_string(msg,key)
  aa = str_to_intArray(msg_to_hex(msg))
#  aa[42] = 10
  hex_key = msg_to_hex(key.ljust(aa.length, key))
  full_key = str_to_intArray(hex_key)
  i = 0
  xor = ''
  while i < aa.size do
    xor << ( aa[i] ^ full_key[i] ).to_s(16).rjust(2, '0')
#    puts "#{i}  aa= #{aa[i]}  val= #{( aa[i] ^ full_key[i] ).to_s(16).rjust(2, '0')}  str= #{msg[i..i]} xor= #{full_key[i]} "
    
  i += 1
  end
return xor
end

string = decrypt_xor_string($input5,"ICE")
puts string
puts "Identical: #{ string.eql? $input51}"


puts "\n----------------------------------------------------------------------------------"
puts ">> crypto challenge :: Set: 1 :: Challenge: 6 "
puts "----------------------------------------------------------------------------------\n"


